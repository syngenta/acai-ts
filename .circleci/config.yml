version: 2.1
orbs:
    sonarcloud: sonarsource/sonarcloud@3.0.1
commands:
    install-newman:
        description: "Install Newman and HTML reporter"
        steps:
            - run:
                  name: Install Newman
                  command: npm install --no-save newman newman-reporter-html
    create-artifacts-dir:
        description: "Create coverage directory"
        steps:
            - run:
                  name: Create coverage directory
                  command: mkdir -p ./coverage
            - run:
                  name: Create lint directory
                  command: mkdir -p ./lint
    postman-integration-run:
        description: "Run integration Postman suite against Serverless Offline"
        parameters:
            auto_validate:
                type: string
        steps:
            - run:
                  name: Install integration dependencies
                  command: npm install --include=dev
                  working_directory: test/integration
            - run:
                  name: Remove existing tarballs
                  command: rm -f acai-ts-*.tgz
                  working_directory: test/integration
            - run:
                  name: Run build for integration tests
                  command: npm run build
                  working_directory: test/integration
            - run:
                  name: Package acai-ts tarball
                  command: npm pack
                  working_directory: test/integration
            - run:
                  name: Install local tarball
                  command: npm install ../../acai-*.tgz
                  working_directory: test/integration
            - run:
                  name: Start Serverless Offline
                  command: |
                      AUTO_VALIDATE=<<parameters.auto_validate>> npx serverless offline --config serverless.yml
                  working_directory: test/integration
                  background: true
            - run:
                  name: Wait for Serverless Offline
                  command: |
                      for i in {1..20}; do
                          curl -s --fail http://localhost:3000/int-test/v1/hello-world >/dev/null && exit 0
                          sleep 3
                      done
                      echo "Serverless failed to start" >&2
                      exit 1
            - run:
                  name: Run Postman collection
                  command: npx newman run test/integration/postman/acai-ts-integration.postman_collection.json -e test/integration/postman/acai-ts-integration.postman_environment.json --reporters cli,html,junit --reporter-html-export coverage/index.html --reporter-junit-export coverage/junit.xml --env-var base_url=http://127.0.0.1:3000/acai-ts-int-test --env-var api_key=integration-key --env-var nested_id=demo-id --env-var AUTO_VALIDATE=<<parameters.auto_validate>>
            - store_test_results:
                path: ./coverage
            - store_artifacts:
                path: ./coverage
    node-install:
        description: "Install Node.js dependencies"
        steps:
            - run:
                name: Install dependencies
                command: npm ci
    node-type-check:
        description: "Run TypeScript type checking"
        steps:
            - run:
                name: TypeScript type check
                command: npm run type-check
    node-linter:
        description: "Run ESLint with HTML output"
        steps:
            - run:
                name: Run linter
                command: npm run lint -- --format html --output-file ./lint/index.html || true
            - store_artifacts:
                path: ./lint
    node-build:
        description: "Build TypeScript project (ESM + CJS)"
        steps:
            - run:
                name: Build project
                command: npm run build
    node-test:
        description: "Run Jest tests"
        steps:
            - run:
                name: Run tests 
                command: npm run test:ci
                environment:
                    NODE_OPTIONS: "--max-old-space-size=4096"
    node-coverage-report:
        description: "Run Jest tests with coverage"
        steps:
            - run:
                name: Run tests with coverage
                command: npm run test:ci
                environment:
                    CI: true
                    NODE_OPTIONS: "--max-old-space-size=4096"
            - store_test_results:
                path: ./coverage/junit.xml
            - store_artifacts:
                path: ./coverage
    npm-deploy:
        description: "Deploy package to NPM registry"
        steps:
            - attach_workspace:
                at: .
            - run:
                name: Authenticate with NPM
                command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
            - run:
                name: Set package version from tag
                command: npm version $CIRCLE_TAG --allow-same-version --no-git-tag-version
            - run:
                name: Publish to NPM
                command: |
                  if echo "$CIRCLE_TAG" | grep -iq "beta"; then
                    echo "Beta version detected in tag: $CIRCLE_TAG"
                    echo "Publishing with --tag beta"
                    npm publish --access public --tag beta
                  else
                    echo "Stable version detected in tag: $CIRCLE_TAG"
                    echo "Publishing to latest"
                    npm publish --access public
                  fi
jobs:
    install-build:
        docker:
            - image: cimg/node:22.19.0
        steps:
            - checkout:
                method: full
            - node-install
            - node-build
            - persist_to_workspace:
                root: ~/project
                paths:
                    - ./*
    type-check:
        docker:
            - image: cimg/node:22.19.0
        steps:
            - attach_workspace:
                at: ~/project
            - node-type-check
    lint:
        docker:
            - image: cimg/node:22.19.0
        steps:
            - attach_workspace:
                at: ~/project
            - create-artifacts-dir
            - node-linter
    test:
        docker:
            - image: cimg/node:22.19.0
        steps:
            - attach_workspace:
                at: ~/project
            - create-artifacts-dir
            - node-test
    coverage:
        docker:
            - image: cimg/node:22.19.0
        steps:
            - attach_workspace:
                at: ~/project
            - create-artifacts-dir
            - node-coverage-report
            - sonarcloud/scan
    postman-auto-validate-false:
        docker:
            - image: cimg/node:22.19.0
        steps:
            - attach_workspace:
                  at: ~/project
            - create-artifacts-dir
            - install-newman
            - postman-integration-run:
                auto_validate: "false"
    postman-auto-validate-true:
        docker:
            - image: cimg/node:22.19.0
        steps:
            - attach_workspace:
                  at: ~/project
            - create-artifacts-dir
            - install-newman
            - postman-integration-run:
                auto_validate: "true"
    install-build-deploy:
        docker:
            - image: cimg/node:22.19.0
        steps:
            - checkout:
                method: full
            - node-install
            - node-build
            - npm-deploy
workflows:
    install-build-deploy-workflow:
        jobs:
            - install-build-deploy:
                filters:
                    tags:
                        only: /.*/
                    branches:
                        ignore: /.*/
    install-build-test-workflow:
        jobs:
            - install-build
            - type-check:  
                requires:
                  - install-build
            - lint:
                requires:
                  - install-build
            - test:
                requires:
                  - install-build
            - coverage:
                context:
                    - sonarcloud
                requires:
                  - install-build
            - postman-auto-validate-false:
                requires:
                  - install-build
            - postman-auto-validate-true:
                requires:
                  - install-build
